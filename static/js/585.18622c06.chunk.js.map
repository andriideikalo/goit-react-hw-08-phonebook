{"version":3,"file":"static/js/585.18622c06.chunk.js","mappings":"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","sources":["components/ContactForms/ContactFormStyled.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contact/selectors.js","components/ContactForms/ContactForm.jsx","components/Filter/FilterStyled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactItem/ContactItemStyled.jsx","components/ContactList/ContactList.jsx","components/Container/ContainerStyled.jsx","components/Container/Container.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormStyled = styled.form`\n  border: 1px solid black;\n  padding: 20px;\n  width: fit-content;\n`;\nexport const LabelStyled = styled.label`\n  display: block;\n  margin-left: 8px;\n  color: black;\n`;\n\nexport const BottonStyled = styled.button`\n  cursor: pointer;\n  background-color: silver;\n  border-radius: 5px;\n  border: none;\n  margin: 10px;\n  &:hover,\n  &:focus {\n    background-color: blue;\n    color: white;\n    /* border: none; */\n    outline: 0;\n  }\n`;\n\nexport const InputStyled = styled.input`\n  display: block;\n  margin-bottom: 20px;\n  :hover,\n  :focus,\n  :active,\n  :focus-visible {\n    border-color: aquamarine;\n    outline: 0;\n  }\n`;\nexport default FormStyled;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleList = createSelector(\n  [selectContacts, selectFilter],\n  (contactsList, filter) =>\n    contactsList.filter(item => item.name.toLowerCase().includes(filter))\n);\n\nexport const selectLoadingState = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\n","import { LabelStyled } from './ContactFormStyled';\nimport { BottonStyled } from './ContactFormStyled';\nimport { addContact } from '../../redux/contact/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contact/selectors';\nimport { Formik, Form, Field } from 'formik';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n// console.log(initialValues);\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      name=\"contact\"\n      initialValues={initialValues}\n      onSubmit={(values, actions) => {\n        const { name, number } = values;\n\n        const isNameInContacts = contacts.find(\n          item => item.name.toLowerCase() === name.toLowerCase()\n        );\n        if (isNameInContacts) {\n          alert('This name is already in your contact list');\n          actions.resetForm();\n          return;\n        }\n        dispatch(addContact({ name, number }));\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <LabelStyled htmlFor=\"name\">\n          Name contact&nbsp;\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            style={{ margin: 10 + 'px' }}\n          ></Field>\n        </LabelStyled>\n        <LabelStyled htmlFor=\"number\">\n          Phone number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            style={{ margin: 10 + 'px' }}\n          ></Field>\n        </LabelStyled>\n        <BottonStyled type=\"submit\">Add contact</BottonStyled>\n      </Form>\n    </Formik>\n  );\n};\n// console.log(initialValues);\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const InputFilterStyled = styled.input`\n  display: block;\n  margin-bottom: 20px;\n\n  &:hover,\n  &:focus,\n  &:active,\n  &:focus-visible {\n    outline: 0;\n    border-color: aquamarine;\n  }\n`;\n\nexport const FilterLabelStyled = styled.label`\n  display: block;\n  margin: 0 0 10px 8px;\n  color: black;\n`;\n\nexport default InputFilterStyled;\n","import React from 'react';\n\nimport { InputFilterStyled } from './FilterStyled';\nimport { FilterLabelStyled } from './FilterStyled';\nimport { setFilter } from '../../redux/contact/filterSplice';\nimport { selectFilter } from '../../redux/contact/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const inputHandleChange = evt => {\n    dispatch(setFilter(evt.target.value));\n  };\n  return (\n    <>\n      <FilterLabelStyled>Find contacts by name</FilterLabelStyled>\n      <FilterLabelStyled htmlFor=\"filter\">\n        <InputFilterStyled\n          type=\"text\"\n          value={filter}\n          onChange={inputHandleChange}\n          name=\"filter\"\n        />\n      </FilterLabelStyled>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const ContactItemStyled = styled.li`\n  color: black;\n  margin-bottom: 10px;\n`;\n\nexport const ContactNameItemStyled = styled.span`\n  display: inline-block;\n  margin-right: 10px;\n`;\n\nexport const ButtonItemStyled = styled.button`\n  cursor: pointer;\n  background-color: lightgray;\n  border-radius: 5px;\n  border: none;\n  &:hover,\n  &:focus {\n    background-color: tomato;\n    color: white;\n    outline: 0;\n  }\n`;\n\nexport default ContactItemStyled;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from '../../redux/contact/selectors';\n\nimport { deleteContact } from '../../redux/contact/operations';\nimport {\n  ContactItemStyled,\n  ButtonItemStyled,\n  ContactNameItemStyled,\n} from '../ContactList/ContactItem/ContactItemStyled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const normalizeFilter = filter.toLowerCase();\n  const visibleList = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n\n  return (\n    <ol>\n      {visibleList.length !== 0 ? (\n        visibleList.map(contact => (\n          <ContactItemStyled key={contact.id}>\n            <ContactNameItemStyled>{contact.name} </ContactNameItemStyled>\n            <ContactNameItemStyled> {contact.number}</ContactNameItemStyled>\n            <ButtonItemStyled\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </ButtonItemStyled>\n          </ContactItemStyled>\n        ))\n      ) : (\n        <h2>The list of contacts is empty</h2>\n      )}\n    </ol>\n  );\n};\n\n// export default ContactList;\n","import styled from '@emotion/styled';\n\nexport const Wrap = styled.div`\n  position: relative;\n  color: white;\n  height: 700px;\n  background-position: center;\n  background-size: cover;\n  background-repeat: no-repeat;\n`;\n\nexport const Box = styled.div`\n  position: absolute;\n  left: 35%;\n  margin-top: 30px;\n  width: 500px;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid blue;\n  background-color: #d7daec;\n`;\n","import { Wrap, Box } from './ContainerStyled';\n\nexport const Container = ({ children }) => {\n  return (\n    <Wrap>\n      <Box>{children}</Box>;\n    </Wrap>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllContacts } from '../redux/contact/operations';\nimport { ContactForm } from '../components/ContactForms/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { selectError, selectLoadingState } from '../redux/contact/selectors';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Container } from '../components/Container/Container';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoadingState);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["LabelStyled","styled","BottonStyled","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectFilter","filter","selectLoadingState","contactsList","item","toLowerCase","includes","isLoading","selectError","error","initialValues","number","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","actions","alert","resetForm","addContact","htmlFor","type","pattern","title","required","style","margin","InputFilterStyled","FilterLabelStyled","Filter","onChange","evt","setFilter","target","ContactItemStyled","ContactNameItemStyled","ButtonItemStyled","ContactList","normalizeFilter","visibleList","contact","onClick","deleteContact","id","Wrap","Box","Container","children","Contacts","useEffect","fetchAllContacts"],"sourceRoot":""}